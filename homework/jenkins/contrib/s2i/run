#!/bin/bash
#
# This script runs the Jenkins server inside the Docker container.
# It copies the configuration and plugins from /opt/openshift/configuration to
# ${JENKINS_HOME}.
#
# It also sets the admin password to ${JENKINS_PASSWORD}.
#

default_version=$(cat /tmp/release.version)
JENKINS_SLAVE_IMAGE_TAG=${JENKINS_SLAVE_IMAGE_TAG:-${default_version}}

source /usr/local/bin/jenkins-common.sh
source /usr/local/bin/kube-slave-common.sh

shopt -s dotglob

function update_admin_password() {
    sed -i "s,<passwordHash>.*</passwordHash>,<passwordHash>$new_password_hash</passwordHash>,g" "${JENKINS_HOME}/users/admin/config.xml"
    echo $new_password_hash > ${JENKINS_HOME}/password
}

function create_jenkins_config_xml() {
  # copy the default configuration from the image into the jenkins config path (which should be a volume for persistence).
  if [ ! -f "${image_config_path}" ]; then
    # If it contains a template (tpl) file, we can do additional manipulations to customize
    # the configuration.
    if [ -f "${image_config_path}.tpl" ]; then
      export KUBERNETES_CONFIG=$(generate_kubernetes_config)
      echo "Generating kubernetes-plugin configuration (${image_config_path}.tpl) ..."
      envsubst < "${image_config_path}.tpl" > "${image_config_path}"
    fi
  fi
}

function create_jenkins_credentials_xml() {
  if [ ! -f "${image_config_dir}/credentials.xml" ]; then
    if [ -f "${image_config_dir}/credentials.xml.tpl" ]; then
      if [ ! -z "${KUBERNETES_CONFIG}" ]; then
        echo "Generating kubernetes-plugin credentials (${JENKINS_HOME}/credentials.xml.tpl) ..."
        export KUBERNETES_CREDENTIALS=$(generate_kubernetes_credentials)
      fi
      # Fix the envsubst trying to substitute the $Hash inside credentials.xml
      export Hash="\$Hash"
      envsubst < "${image_config_dir}/credentials.xml.tpl" > "${image_config_dir}/credentials.xml"
    fi
  fi
}

function create_jenkins_config_from_templates() {
    find ${image_config_dir} -type f -name "*.tpl" -print0 | while IFS= read -r -d '' template_path; do
        local target_path=${template_path%.tpl}
        if [[ ! -f "${target_path}" ]]; then
            if [[ "${target_path}" == "${image_config_path}" ]]; then
                create_jenkins_config_xml
            elif [[ "${target_path}" == "${image_config_dir}/credentials.xml" ]]; then
                create_jenkins_credentials_xml
            else
                # Allow usage of environment variables in templated files, e.g. ${DOLLAR}MY_VAR is replaced by $MY_VAR
                DOLLAR='$' envsubst < "${template_path}" > "${target_path}"
            fi
        fi
    done
}

function install_plugins() {
  # If the INSTALL_PLUGINS variable is populated, then attempt to install
  # those plugins before copying them over to JENKINS_HOME
  # The format of the INSTALL_PLUGINS variable is a comma-separated list
  # of pluginId:pluginVersion strings
  if [[ -n "${INSTALL_PLUGINS:-}" ]]; then
    echo "Installing additional plugins: ${INSTALL_PLUGINS} ..."

    # Create a temporary file in the format of plugins.txt
    plugins_file=$(mktemp)
    IFS=',' read -ra plugins <<< "${INSTALL_PLUGINS}"
    for plugin in "${plugins[@]}"; do
      echo "${plugin}" >> "${plugins_file}"
    done

    # Call install plugins with the temporary file
    /usr/local/bin/install-plugins.sh "${plugins_file}"
  fi
  
  if [ "$(ls /opt/openshift/plugins/* 2>/dev/null)" ]; then
    mkdir -p ${JENKINS_HOME}/plugins
    echo "Copying $(ls /opt/openshift/plugins/* | wc -l) files to ${JENKINS_HOME} ..."
    # in case of rhel, if there are plugins in /opt/openshift/plugins, that means the user is overriding
    # the image's base set of plugins and taking ownership of the plugin's version going forward; and
    # so we break the link to /usr/lib/jenkins via use of --remove-destination; in the case of centos, it
    # is not necessary (no links are in play) but has no ill effect so we maintain a common path for
    # both offerings
    for FILENAME in /opt/openshift/plugins/* ; do
        # also need to nuke the metadir; it will get properly populated on jenkins startup
        basefilename=`basename $FILENAME .jpi`
        rm -rf "${JENKINS_HOME}/plugins/${basefilename}"
        cp --remove-destination $FILENAME ${JENKINS_HOME}/plugins
    done
    rm -rf /opt/openshift/plugins
  fi
}

function migrate_slave_configuration() {
  # replace [docker.io/]openshift/jekins-slave-xxxx-centos7[:optionaltag] with docker.io/openshift/jenkins-slave-xxxx-centos7:VersionTag
  sed -i "s#<image>\(docker.io/\)\{0,1\}openshift/jenkins-slave-maven-centos7\(:.*\)\{0,1\}</image>#<image>docker.io/openshift/jenkins-slave-maven-centos7:${JENKINS_SLAVE_IMAGE_TAG}</image>#" /var/lib/jenkins/config.xml
  sed -i "s#<image>\(docker.io/\)\{0,1\}openshift/jenkins-slave-nodejs-centos7\(:.*\)\{0,1\}</image>#<image>docker.io/openshift/jenkins-slave-nodejs-centos7:${JENKINS_SLAVE_IMAGE_TAG}</image>#" /var/lib/jenkins/config.xml

  # replace registry.access.redhat.com/openshift3/jekins-slave-xxxx-rhel7[:optionaltag] with registry.access.redhat.com/openshift3/jenkins-slave-xxxx-rhel7:VersionTag
  sed -i "s#<image>registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7\(:.*\)\{0,1\}</image>#<image>registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:${JENKINS_SLAVE_IMAGE_TAG}</image>#" /var/lib/jenkins/config.xml
  sed -i "s#<image>registry.access.redhat.com/openshift3/jenkins-slave-nodejs-rhel7\(:.*\)\{0,1\}</image>#<image>registry.access.redhat.com/openshift3/jenkins-slave-nodejs-rhel7:${JENKINS_SLAVE_IMAGE_TAG}</image>#" /var/lib/jenkins/config.xml
}

function force_copy_plugins() {
    echo "Either the version of this image does not match the version"
    echo "of this existing deployment, or that equality could not be established."
    echo "A one time replacement of all the plugins from the image to the"
    echo "jenkins plugin directory will occur."
    echo ""
    echo "Image version: ${OPENSHIFT_JENKINS_IMAGE_VERSION}"
    deploymentversion=`cat ${JENKINS_HOME}/image-version`
    echo "Deployment version: ${deploymentversion}"
   if [ "$(ls /usr/lib/jenkins/*.hpi 2>/dev/null)" ]; then
      # if rhel
      for FILENAME in /usr/lib/jenkins/*.hpi ; do
         basefilename=`basename $FILENAME .hpi`
         plugin_image_volume_location="${JENKINS_HOME}/plugins/${basefilename}.jpi"
         echo "Force linking ${FILENAME} to ${plugin_image_volume_location}"
         ln -sf $FILENAME $plugin_image_volume_location
         # also need to nuke the metadir; it will get properly populated on jenkins startup
         rm -rf "${JENKINS_HOME}/plugins/${basefilename}"
      done
   else
       #if centos
       # first a one time clean up:  there were versions of 3.6 and 3.7 that
       # mistakingly installed optional plugins;  those optional plugins, at
       # the older levels, will mess up plugins we do install at 3.9 or later;
       # we are removing those here
       rm -rf $JENKINS_HOME/plugins/managed-scripts*
        install_plugins
   fi 
}


#NOTE:  periodically check https://ce-gitlab.usersys.redhat.com/ce/jboss-dockerfiles/blob/develop/scripts/os-java-run/added/java-default-options for updates

#get the fully qualified paths to both 32 and 64 bit java
JVMPath32bit=`alternatives --display java | grep family | grep i386 | awk '{print $1}'`
JVMPath64bit=`alternatives --display java | grep family | grep x86_64 | awk '{print $1}'`


# set the java version used based on OPENSHIFT_JENKINS_JVM_ARCH
if [ -z $OPENSHIFT_JENKINS_JVM_ARCH  ]; then
    echo "Using 64 bit Java since OPENSHIFT_JENKINS_JVM_ARCH is not set (historic setting)"
    alternatives --set java $JVMPath64bit
elif [ "${OPENSHIFT_JENKINS_JVM_ARCH}" == "x86_64"  ]; then
    echo "64 bit Java explicitly set in OPENSHIFT_JENKINS_JVM_ARCH"
    alternatives --set java $JVMPath64bit
else
    echo "OPENSHIFT_JENKINS_JVM_ARCH is set to ${OPENSHIFT_JENKINS_JVM_ARCH} so using 32 bit Java"
    alternatives --set java $JVMPath32bit
    export MALLOC_ARENA_MAX=1
fi

image_config_dir="/opt/openshift/configuration"
image_config_path="${image_config_dir}/config.xml"

CONTAINER_MEMORY_IN_BYTES=`cat /sys/fs/cgroup/memory/memory.limit_in_bytes`
DEFAULT_MEMORY_CEILING=$((2**40-1))
if [ "${CONTAINER_MEMORY_IN_BYTES}" -lt "${DEFAULT_MEMORY_CEILING}" ]; then

    if [ -z $CONTAINER_HEAP_PERCENT ]; then
        CONTAINER_HEAP_PERCENT=0.50
    fi

    CONTAINER_MEMORY_IN_MB=$((${CONTAINER_MEMORY_IN_BYTES}/1024**2))
    #if machine has 4GB or less, meaning max heap of 2GB given current default, force use of 32bit to save space unless user
    #specifically want to force 64bit
    HEAP_LIMIT_FOR_32BIT=$((2**32-1))
    HEAP_LIMIT_FOR_32BIT_IN_MB=$((${HEAP_LIMIT_FOR_32BIT}/1024**2))
    CONTAINER_HEAP_MAX=$(echo "${CONTAINER_MEMORY_IN_MB} ${CONTAINER_HEAP_PERCENT}" | awk '{ printf "%d", $1 * $2 }')
    if [[ -z $OPENSHIFT_JENKINS_JVM_ARCH && "${CONTAINER_HEAP_MAX}" -lt "${HEAP_LIMIT_FOR_32BIT_IN_MB}"  ]]; then
      echo "max heap in MB is ${CONTAINER_HEAP_MAX} and 64 bit was not explicitly set so using 32 bit Java"
      alternatives --set java $JVMPath32bit
      export MALLOC_ARENA_MAX=1
    fi

    JAVA_MAX_HEAP_PARAM="-Xmx${CONTAINER_HEAP_MAX}m"
    if [ -z $CONTAINER_INITIAL_PERCENT ]; then
      # jboss default was 100% or ms==mx
      JAVA_INITIAL_HEAP_PARAM="-Xms${CONTAINER_HEAP_MAX}m"
    else
      CONTAINER_INITIAL_HEAP=$(echo "${CONTAINER_HEAP_MAX} ${CONTAINER_INITIAL_PERCENT}" | awk '{ printf "%d", $1 * $2 }')
      JAVA_INITIAL_HEAP_PARAM="-Xms${CONTAINER_INITIAL_HEAP}m"
    fi
fi

if [ -z "$JAVA_GC_OPTS" ]; then
  # note - MaxPermSize no longer valid with v8 of the jdk ... used to have -XX:MaxPermSize=100m
  JAVA_GC_OPTS="-XX:+UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -XX:MaxMetaspaceSize=100m"
fi

if [ ! -z "${USE_JAVA_DIAGNOSTICS}" ]; then
    JAVA_DIAGNOSTICS="-XX:NativeMemoryTracking=summary -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UnlockDiagnosticVMOptions"
fi

if [ ! -z "${CONTAINER_CORE_LIMIT}" ]; then
    JAVA_CORE_LIMIT="-XX:ParallelGCThreads=${CONTAINER_CORE_LIMIT} -Djava.util.concurrent.ForkJoinPool.common.parallelism=${CONTAINER_CORE_LIMT} -XX:CICompilerCount=2"
fi

# Since OpenShift runs this Docker image under random user ID, we have to assign
# the 'jenkins' user name to this UID.
generate_passwd_file

mkdir /tmp/war
unzip -q /usr/lib/jenkins/jenkins.war -d /tmp/war
if [ -e ${JENKINS_HOME}/password ]; then
  old_salt=$(cat ${JENKINS_HOME}/password | sed 's/:.*//')
fi
new_password_hash=`obfuscate_password ${JENKINS_PASSWORD:-password} $old_salt`

# finish the move of the default logs dir, /var/log/jenkins, to the volume mount
mkdir ${JENKINS_HOME}/logs
ln -sf ${JENKINS_HOME}/logs /var/log/jenkins

# clean up any plugins in JENKINS_HOME/plugins which we previously linked, but
# have since deleted from the image
for FILENAME in ${JENKINS_HOME}/plugins/*.jpi; do
    # test if it is a sym link, otherwise users have overriden, so leave alone
    # test command silent, don't need dev/null
    test -h $FILENAME
    if [ $? -eq 0 ]; then
	stat -L $FILENAME >& /dev/null
	if [ $? -eq 0 ]; then
	    continue
	fi
	echo "Unlinking plugin ${FILENAME} since it has been removed"
	unlink $FILENAME
    fi
done

if [ -z "${OVERRIDE_RELEASE_MIGRATION_OVERWRITE}" ]; then
   # image release migration
   if [[ ! -e ${JENKINS_HOME}/image-version && -e ${JENKINS_HOME}/configured ]]; then
      # 1) if the image-version file does not exist, but the configured file does, then we are upgrading from
      # earlier versions of the image which may have not sorted out the migration
      # scenario for PVs; we will do a one time replace of the /var/lib/jenkins/plugins
      # files from the appropriate image source
      force_copy_plugins
   elif [ -e ${JENKINS_HOME}/image-version ]; then
      # 2) if the image-version file does exist, but does not match this image
      # then do the one time replace
      currentversion=`cat ${JENKINS_HOME}/image-version`
      if [ "${currentversion}" != "${OPENSHIFT_JENKINS_IMAGE_VERSION}" ]; then
         force_copy_plugins
      fi
   fi
fi
echo ${OPENSHIFT_JENKINS_IMAGE_VERSION} > ${JENKINS_HOME}/image-version


# otherwise, for rhel, while the plugins are initially linked to the image volume on initial start,
# some maintenance wrt transferring plugins is done on every startup;  this logic
# covers the case of a release upgrade that introduces new plugins.
#
# we employ links instead of copies, and check for the existance in JENKINS_HOME/plugins,
# so that:
# 1) we don't copy over plugins the user has overridden since this image first was started
# (either via this image's extension mechanisms or the jenkins plugin mgr console)
# 2) if versions of an existing plugin change as a result of a release upgrade, those changes
# are picked up
# 3) if new plugins result from plugin changes within a given release, they are picked up
#
# all of this is moot on centos, since our centos image does not store any plugins in /usr/lib/jenkins
if [ "$(ls /usr/lib/jenkins/*.hpi 2>/dev/null)" ]; then
    # in case very first time through, make sure plugins dir is there
    mkdir -p ${JENKINS_HOME}/plugins
   
   for FILENAME in /usr/lib/jenkins/*.hpi ; do
        basefilename=`basename $FILENAME .hpi`
        plugin_image_volume_location="${JENKINS_HOME}/plugins/${basefilename}.*"
        if [ "$(ls ${plugin_image_volume_location} 2>/dev/null)" ]; then
          continue
        fi
	# this will link new plugins introduced into /usr/lib/jenkins to JENKINS_HOME
	echo "Linking ${FILENAME} RPM installed Jenkins plugins to ${JENKINS_HOME} ..."  
        ln -s  $FILENAME ${JENKINS_HOME}/plugins/${basefilename}.jpi
   done
   
   # since this is rhel, if it is also the initial start of the image, we can remove the 
   # the /usr/lib/jenkins/*.hpi link from /opt/openshift/plugins/*.jpi that 
   # was done in the rhel7 dockefile; that link is done to assist our s2i
   # extension scenario, so that the existing plugins are available during 
   # the s2i assemble step (which precedes the s2i run step handled by this
   # script); however, we must keep any plugins pulled in by s2i assemble, so
   # we only remove files which are the same as /usr/lib/jenkins
   #
   # also, removing the /opt/openshift/plugin file will mean install_plugins
   # will not process it, and this will preserve the links if nothing has changed so that subsequent
   # release to release migrations can work since the links will result in picking
   # up the new content in /usr/lib/jenkins
   if [ ! -e ${JENKINS_HOME}/configured ]; then
      echo "Cleaning up links to base image plugins in /opt/openshift/plugins as part of this initial image start"
      for FILENAME in /opt/openshift/plugins/* ; do
         basefilename=`basename $FILENAME .jpi`
         rpm_plugin_location="/usr/lib/jenkins/${basefilename}.hpi"
         echo "Looking at ${FILENAME} and ${rpm_plugin_location}"
         if [ "$(ls ${rpm_plugin_location} 2>/dev/null)" ]; then
            optcksum=`cksum ${FILENAME} | awk '{ print $1 }'`
            rpmcksum=`cksum ${rpm_plugin_location} | awk '{ print $1 }'`
            echo "${FILENAME} cksum ${optcksum} and ${rpm_plugin_location} cksum ${rpmcksum}"
            if [ "${optcksum}" == "${rpmcksum}" ]; then
               echo "Removing ${FILENAME}"
               rm -f $FILENAME
            fi
         fi
      done
      if [ "$(ls /opt/openshift/plugins/* 2>/dev/null)" ]; then
         echo "Remaining plugins in /opt/openshift/plugins are $(ls /opt/openshift/plugins)"
      fi
   fi
fi

if [ ! -e ${JENKINS_HOME}/configured ]; then
    # This container hasn't been configured yet
    create_jenkins_config_from_templates

    echo "Copying Jenkins configuration to ${JENKINS_HOME} ..."
    cp -r /opt/openshift/configuration/* ${JENKINS_HOME}

    install_plugins

    echo "Creating initial Jenkins 'admin' user ..."
    
    update_admin_password
    
    touch ${JENKINS_HOME}/configured
else  
  if [ ! -z "${OVERRIDE_PV_CONFIG_WITH_IMAGE_CONFIG}" ]; then
    echo "Overriding jenkins config.xml stored in ${JENKINS_HOME}/config.xml"
    rm -f ${JENKINS_HOME}/config.xml
	
    create_jenkins_config_xml

    cp -r ${image_config_path} ${JENKINS_HOME}
  fi
    
  if [ ! -z "${OVERRIDE_PV_PLUGINS_WITH_IMAGE_PLUGINS}" ]; then
    echo "Overriding plugins stored in ${JENKINS_HOME}/plugins"
    rm -rf ${JENKINS_HOME}/plugins

    install_plugins
  fi  
fi

if [ -e ${JENKINS_HOME}/password ]; then
  # if the password environment variable has changed, update the jenkins config.
  # we don't want to just blindly do this on startup because the user might change their password via
  # the jenkins ui, so we only want to do this if the env variable has been explicitly modified from
  # the original value.
  old_password_hash=`cat ${JENKINS_HOME}/password`
  if [ $old_password_hash != $new_password_hash ]; then
      echo "Detected password environment variable change, updating Jenkins configuration ..."
      update_admin_password
  fi
fi

if [ -f "${CONFIG_PATH}.tpl" -a ! -f "${CONFIG_PATH}" ]; then
  echo "Processing Jenkins configuration (${CONFIG_PATH}.tpl) ..."
  envsubst < "${CONFIG_PATH}.tpl" > "${CONFIG_PATH}"
fi

rm -rf /tmp/war

if [ -z ${SKIP_SLAVE_CONFIG_MIGRATION} ]; then
  echo "Migrating slave image configuration to current version tag ..."
  migrate_slave_configuration
fi

# default log rotation in /etc/logrotate.d/jenkins handles /var/log/jenkins/access_log
if [ ! -z "${OPENSHIFT_USE_ACCESS_LOG}" ]; then
    JENKINS_ACCESSLOG="--accessLoggerClassName=winstone.accesslog.SimpleAccessLogger --simpleAccessLogger.format=combined --simpleAccessLogger.file=/var/log/jenkins/access_log"
fi

## The Jenkins monitoring plugin stores its data in /var/lib/jenkins/monitoring/<hostName>.
## Since the pod name changes everytime there is a deployment, any trending data is lost over
## re-deployments. We force the application name to allow for historical data collection.
##
JENKINS_SERVICE_NAME=${JENKINS_SERVICE_NAME:-JENKINS}
JENKINS_SERVICE_NAME=`echo ${JENKINS_SERVICE_NAME} | tr '[a-z]' '[A-Z]' | tr '-' '_'`
JAVA_OPTS="${JAVA_OPTS} -Djavamelody.application-name=${JENKINS_SERVICE_NAME}"

# if `docker run` first argument start with `--` the user is passing jenkins launcher arguments
if [[ $# -lt 1 ]] || [[ "$1" == "--"* ]]; then
   exec java $JAVA_GC_OPTS $JAVA_INITIAL_HEAP_PARAM $JAVA_MAX_HEAP_PARAM -Duser.home=${HOME} $JAVA_CORE_LIMIT $JAVA_DIAGNOSTICS $JAVA_OPTS -Dfile.encoding=UTF8 -jar /usr/lib/jenkins/jenkins.war $JENKINS_OPTS $JENKINS_ACCESSLOG "$@"
fi

# As argument is not jenkins, assume user want to run his own process, for sample a `bash` shell to explore this image
exec "$@"
