kind: Template
apiVersion: v1
metadata:
  labels:
    app: ${APPLICATION_NAME}
  annotations:
    description: The SonarQube OpenShift template
    tags: instant-app, ${APPLICATION_NAME}
  name: ${APPLICATION_NAME}
message: "Login to SonarQube with the default admin user: admin/admin"
objects:

- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    tags:
    - annotations:
        description: The SonarQube Docker image
        tags: ${APPLICATION_NAME}
      from:
        kind: DockerImage
        name: ${APPLICATION_NAME}:${SONARQUBE_VERSION}
      importPolicy: {}
      name: ${SONARQUBE_VERSION}

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-docker-build"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    triggers:
    - type: ImageChange
      imageChange: {}
    - type: ConfigChange
    source:
      type : Dockerfile
      dockerfile: "FROM centos:7"
    strategy:
      dockerStrategy:
        dockerfilePath: "${DOCKERFILE_NAME}"
        env:
          - name: "SONARQUBE_VERSION"
            value: "${SONARQUBE_VERSION}"
    output:
      to:
        kind: "ImageStreamTag"
        name: "${APPLICATION_NAME}:latest"
    resources: {}
    postCommit: {}
    
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.${APPLICATION_NAME}.image.entrypoint: '["./bin/run.sh"]'
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        serviceAccountName: ${APPLICATION_NAME}
        containers:
        - env:
          - name: SONARQUBE_JDBC_PASSWORD
            value: ${SONARQUBE_JDBC_PASSWORD}
          - name: SONARQUBE_JDBC_URL
            value: ${SONARQUBE_JDBC_URL}
          - name: SONARQUBE_JDBC_USERNAME
            value: ${SONARQUBE_JDBC_USERNAME}
          image: ' '
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 9000
            protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            httpGet:
              port: 9000
              path: /
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            httpGet:
              port: 9000
              path: /
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
              memory: 1Gi
            limits:
              cpu: 1
              memory: 2Gi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /opt/sonarqube/data
            name: ${APPLICATION_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APPLICATION_NAME}-data
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-data
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:${SONARQUBE_VERSION}
      type: ImageChange

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: "${APPLICATION_NAME}"
    name: ${APPLICATION_NAME}-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${SONAR_VOLUME_CAPACITY}

- kind: ServiceAccount
  apiVersion: v1
  metadata:
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"postgres-${DOMAIN}","namespace":"","kind":"Service"}]'
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    ports:
    - name: ${APPLICATION_NAME}
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: Route for SonarQube's http service.
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    tls:
      termination: edge
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  required: true
  value: postgres
- description: The functional domain of the application.
  name: DOMAIN
  required: true
- name: DOCKERFILE_PATH
  displayName: Dockerfile path
  description: Path within Git Repo wehere Dockerfile can be found.
  value: ""
  required: false
- name: DOCKERFILE_NAME
  displayName: Dockerfile name
  description: Name of Dockerfile.
  value: "Dockerfile"
  required: true
- displayName: SonarQube version
  value: "6.7.1"
  name: SONARQUBE_VERSION
  required: true
- description: Username for SonarQube Server PostgreSQL backend
  displayName: SonarQube's PostgreSQL Username
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: SONARQUBE_JDBC_USERNAME
  required: true
- description: Password for SonarQube Server PostgreSQL backend
  displayName: SonarQube's PostgreSQL Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: SONARQUBE_JDBC_PASSWORD
  required: true
- description: URL for SonarQube Server PostgreSQL backend
  displayName: SonarQube's PostgreSQL URL
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name:  SONARQUBE_JDBC_URL
  value: "jdbc:postgresql://postgres-cicd/cicd"
- description: Volume space available for SonarQube
  displayName: SonarQube Volume Capacity
  name: SONAR_VOLUME_CAPACITY
  required: true
  value: 1Gi